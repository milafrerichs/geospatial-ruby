---
title: Geospatial Ruby
---
%textarea#source
  :preserve
    class: middle, center
    # Geospatial Ruby
    ---
    class: middle, center
    background-image: url(/images/Ruby_logo.png)
    # Ruby is awesome!!
    ---
    class: middle, center
    # Jeder sollte mehr Ruby schreiben
    ---
    class: middle, center
    # Ihr sollte mehr Ruby schreiben!!
    ---
    class: middle, center
    # Aber warum Ruby?
    ???
    Wer von euch hat schon was von Ruby ghört oder damit gearbeitet?
    ---
    class: middle, center
    # Ruby ist einfach zu lernen
    ---
    class: middle, center
    # Ruby ist fun!
    ---
    class: middle, center
    # Ruby ist angenehm zu schreiben
    ---
    class: middle, center
    # Ruby ist geschrieben für "Developer Happiness"
    ---
    class: middle, center
    # Ruby hat eine sehr aktive Community
    ---
    class: middle, center
    # Ruby hat eine einfache Syntax
    ---
    class: middle, center
    # Ruby hat RubyGems & Bundler
    ???
    Paket-hosting & Paketmanager
    ---
    class: middle, center
    # Ruby hat Rails
    ---
    class: middle, center
    # Aber was ist eigentlich dieses Ruby?
    ---
    layout: true
    .footer[
      <img src="/images/logo.png" height="20" />
      .what[Mila Frerichs, Geospatial Ruby, FOSSGIS 2015]
    ]

    ---
    # Ruby
    --

    ### Konzepte
    - objektorientiert
    --

    - dynamisch
    --

    - automatische Speicherbereinigung
    --


    Alle Datentypen sind in Ruby Objekte
    --

    ```
    p "Hello World"
    ```
    das Hallo Welt von Ruby
    ---
    class: middle, center
    # Ruby und Geospatial
    ???
    Ich weiß ist nicht mehr in; heutzutage ist ja alles Javscript
    ---
    class: center
    # Wer benutzt Ruby im Geo-Umfeld?
    <img src="/images/708px-ESRI_Logo.svg.png" height="100" />

    <img src="/images/logos_full_cartodb_light.png" height="100" />

    <img src="/images/Propublica_logo.jpg" height="100" />

    <img src="/images/91249.png" height="100" />
    ???
    Esri, CartoDB, ProPublica, Spatial Networks
    ---
    class: middle, center
    # Was war zuerst Ruby oder Geo?
    ---
    class: middle, center
    # Umfrage hat ergeben:  
    # zuerst Ruby und Geo später
    ---
    class: middle, center
    # Warum ist das so?
    ---
    class: middle, center
    # Und was sagt ihr dazu?
    ---
    class: middle, center
    # Drei wichtige Bibliotheken
    ---
    class: middle, center
    ## SimplerTiles
    --

    ## Terraformer-ruby
    --

    ## RGeo
    ---
    class: middle, center
    # SimplerTiles
    Entwickler: ProPublica  
    https://github.com/propublica/simpler-tiles
    ---
    # SimplerTiles
    Ruby-Wrapper für Simple-Tiles

    --
    ### Simple-Tiles
    C-Bibliothek für einfache Tile-Server
    > Simple Tiles is an image generation library for spatial data written in C. At it's core it is a thin wrapper on top of OGR for spatial data and Cairo for image generation.
    ---
    # Ein einfaches Beispiel
    ```ruby
      require 'rubygems'
      require 'sinatra'
      require 'simpler_tiles'

      get '/tiles/:x/:y/:z.png' do
        content_type 'image/png'
        map = SimplerTiles::Map.new do |m|
          m.bgcolor = "#000000"
          m.slippy params[:x].to_i, params[:y].to_i, params[:z].to_i
          m.layer File.join("ne_110m_admin_0_countries_lakes.shp") do |l|
            l.query "select * from 'ne_110m_admin_0_countries_lakes'"
          end
        end
        map.to_png
      end
    ```
    <iframe id="simplemap" src="http://simple-mapping-codeformuenster.gigantic.io/" width="100%"/>
    ???
    slippy: Takes a series of google map tile coordinates and sets the bounds, projection width and height of the simplet_map_t instance accordingly.
    ---
    # Ergebnis
    ![Tile](http://tile-server-world-codeformuenster.gigantic.io/tiles/1/2/3/3.png)
    ---
    # Ein komplexeres Beispiel
    ## Änderung der Projektion
    ```ruby

      require 'rubygems'
      require 'sinatra'
      require 'simpler_tiles'

      get '/tiles/:x/:y/:z.png' do
        content_type 'image/png'
        map = SimplerTiles::Map.new do |m|
          m.bgcolor = "#000000"
          m.slippy params[:x].to_i, params[:y].to_i, params[:z].to_i
    *      m.srs     = 'EPSG:4326'
          m.layer File.join("ne_110m_admin_0_countries_lakes.shp") do |l|
            l.query "select * from 'ne_110m_admin_0_countries_lakes'"
          end
        end
        map.to_png
      end
    ```
    ---
    # Ergebnis
    <iframe id="simplemap" src="http://simple-mapping-codeformuenster.gigantic.io/projections/1" height="50%" width="100%"/>
    ---
    # Änderung von Stilen
    ```ruby

      require 'rubygems'
      require 'sinatra'
      require 'simpler_tiles'

      get '/tiles/:x/:y/:z.png' do
        content_type 'image/png'
        map = SimplerTiles::Map.new do |m|
          m.bgcolor = "#000000"
          m.slippy params[:x].to_i, params[:y].to_i, params[:z].to_i
          m.layer File.join("ne_110m_admin_0_countries_lakes.shp") do |l|
            l.query "select * from 'ne_110m_admin_0_countries_lakes'" do |q|
              q.styles
    *            'stroke' => '#002240',
    *            'weight' => 2,
    *            'fill' => '#f00000'
            end
          end
        end
        map.to_png
      end
    ```
    ---
    # Ergebnis
    <iframe id="simplemap" src="http://simple-mapping-codeformuenster.gigantic.io/projections/2" height="50%" width="100%"/>
    ---
    # SimplerTiles
    und noch viel mehr Einstellungsmöglichkeiten
    ...
    ---
    class: middle, center
    # Terraformer Ruby
    Entwickler: kenichi / ESRI (PDX & WSH)  
    [https://github.com/kenichi/terraformer-ruby](https://github.com/kenichi/terraformer-ruby)
    ---
    # Terraformer Ruby
    Ruby Implementation der JS Bibliothek Terraformer.js von Esri
    > Toolkit for working with GeoJSON in pure Ruby
    ---
    # Features
    - einfache geometrische Operationen wie: distance, intersects, contains, within, etc
    - parsen von ArcGIS und transformieren nach GeoJSON
    - ...
    ---
    # Ein super simples Beispiel
    Zwei Koordinaten und deren Distanz
    ```ruby
      muenster = [7.625304,51.9606925].to_c
      # => #<Terraformer::Coordinate lon=7.625304 lat=51.9606925 >
      berlin = [13.4370738,52.5014505].to_c
    * p muenster.distance_to(berlin).to_f
      # => 401087.2980443716
    ```
    ---
    # Distanz
    Zwischen zwei Punkten(GeoJSON style)
    ```
      muenster = Terraformer.parse '{ "type": "Point", "coordinates": [7.625304,51.9606925] }'
      # => <Terraformer::Point:0x007ff45b131328 @coordinates=#<Terraformer::Coordinate lon=7.625304 lat=51.9606925 >
      berlin = Terraformer.parse '{ "type": "Point", "coordinates": [13.4370738,52.5014505] }'
    * p muenster.distance_to(berlin).to_f
      # => 401087.2980443716
    ```
    ---
    # Distanz
    Zwischen Punkt und Polygon
    ```
      muenster = Terraformer.parse '{ "type": "Point", "coordinates": [7.625304,51.9606925] }'
      berlin = Terraformer.parse '{ "type": "Polygon", "coordinates": [ [ 13.417224884033203, 52.51350476109457 ], [ 13.411216735839844, 52.50671376947057 ], [ 13.399887084960938, 52.50086222750018 ], [ 13.402118682861328, 52.493233155027156 ], [ 13.425979614257812, 52.49417379714532 ], [ 13.432674407958984, 52.5069227387063 ], [ 13.417224884033203, 52.51350476109457 ] ] }'
    * p muenster.distance_to(berlin).to_f
      # => 398572.8885717637
    ```
    ---
    # Enthält
    Ist ein Punkt in einem Polygon enthalten?
    ```
      muenster = Terraformer.parse '{ "type": "Point", "coordinates": [7.612452507019042, 51.963545851239274] }'
      muenster_p = Terraformer.parse '{ "type": "Polygon", "coordinates": [ [ [ 7.604341506958008, 51.96819954862584 ], [ 7.601208686828613, 51.964735763027456 ], [ 7.603955268859864, 51.95825697220763 ], [ 7.618331909179687, 51.95801895797933 ], [ 7.61876106262207, 51.96478864726265 ], [ 7.611637115478515, 51.96938933686815 ], [ 7.604341506958008, 51.96819954862584 ] ] ] }'
    * p muenster.within?(muenster_p)
      # => true
    ```
    ---
    # ArcGIS JSON zu GeoJSON
    transformieren von ArcGIS JSON-Objekten zu GeoJSON
    ```
      arcgis = '{ "x":-122.6764, "y":45.5165, "spatialReference": { "wkid": 4326 } }'
    * p Terraformer::ArcGIS.parse(arcgis).to_json
      # => "{"type":"Point","coordinates":[-122.6764,45.5165]}"
    ```
    --

    und natürlich auch andersrum
    ```
      muenster = '{ "type": "Point", "coordinates": [7.612452507019042, 51.963545851239274] }'
    * p Terraformer::ArcGIS.convert(muenster).to_json
      # => "{"x":7.612452507019042,"y":51.963545851239274,"spatialReference":{"wkid":4326}}"
    ```
    ---
    class: middle, center
    ## Und noch viel mehr
    ---
    class: middle, center
    # RGeo
    Entwickler: Daniel Azuma  
    https://github.com/rgeo
    ---
    class: middle, center
    ## Kann einen ganzen Talk füllen

    ---
    class: middle, center
    ## für das arbeiten mit Rails gedacht
    ---
    # Ein Überblick
    > At its core is an implementation of the industry standard OGC Simple Features Specification, which provides data representations of geometric objects such as points, lines, and polygons, along with a set of geometric analysis operations.

    - Represent spatial and geolocation data objects such as points, lines, and polygons in your Ruby application.
    - Perform standard spatial analysis operations such as finding intersections, creating buffers, and computing lengths and areas.
    - Correctly handle spherical geometry, and compute geographic projections for map display and data analysis.
    - Read and write location data in the WKT and WKB representations used by spatial databases.
    ---
    # Extensions
    ## Active Record Extensions für
    - PostGIS
    - MySQL Spatial
    - SpatiaLite

    --

    ## rgeo-shapefile
    Lesen und schreiben von ESRI Shapefiles
    --

    ## rgeo-geojson
    Lesen und schreiben von GeoJSON
    ---
    class: middle, center
    ## Daniel hat ein super 9-teiliges Tutorial auf seiner Seite:
    http://daniel-azuma.com/articles/georails
    ---
    class: middle, center
    # Lasst uns diskutieren!






